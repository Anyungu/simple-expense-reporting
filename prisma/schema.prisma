generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model BalanceAccount {
  id        Int         @id @default(autoincrement())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  name      AccountName
  balance   Int         @default(0)
  companyId Int
  company   Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, name])
}

model Transaction {
  id                Int             @id @default(autoincrement())
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  date              DateTime        @default(now())
  description       String          @db.VarChar(255)
  type              TransactionType
  amount            Int             @default(0)
  reference         String          @default("") @db.VarChar(255)
  transactionRolled Boolean         @default(false)
  companyId         Int
  company           Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId])
}

enum AccountName {
  BANK
  CASH
  LOAN
  INVESTMENT
  ASSET
  REVENUE
  EXPENDITURE
  MARGIN
}

enum TransactionType {
  INVESTMENT_TO_CASH
  INVESTMENT_TO_BANK
  INVESTMENT_TO_ASSET
  LOAN_TO_BANK
  LOAN_TO_CASH
  LOAN_TO_ASSET
  CASH_TO_LOAN
  BANK_TO_LOAN
  CASH_TO_ASSET
  BANK_TO_ASSET
  ASSET_TO_BANK_SELL
  ASSET_TO_CASH_SELL
  ASSET_TO_BANK_HIRE
  ASSET_TO_CASH_HIRE
  BANK_TO_EXPENSE
  CASH_TO_EXPENSE
  LOAN_TO_EXPENSE
  BANK_TO_CASH
  CASH_TO_BANK
  CLIENT_TO_BANK
  CLIENT_TO_CASH
}

model User {
  id            String            @id @default(cuid())
  name          String?
  email         String            @unique
  password      String?
  emailVerified Boolean?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  companies     UserCompanyRole[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Company {
  id          Int               @id @default(autoincrement())
  name        String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  description String            @db.VarChar(255)
  logo        String            @db.Text()
  users       UserCompanyRole[]
  accounts    BalanceAccount[]
  Transaction Transaction[]
  Asset       Asset[]
}

model UserCompanyRole {
  userId    String
  companyId Int
  role      UserRoleEnum
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  company   Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@id([userId, companyId])
}

enum UserRoleEnum {
  SUPER_ADMIN
  COMPANY_ADMIN
  USER_ADMIN
}

model Asset {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String?  @db.VarChar(255)
  amount      Int      @default(0)
  companyId   Int
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId])
}
